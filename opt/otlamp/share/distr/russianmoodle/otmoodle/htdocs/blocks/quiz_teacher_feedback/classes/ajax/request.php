<?php

// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * Блок комментарий преподавателя
 *
 * @package     block_quiz_teacher_feedback
 * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

namespace block_quiz_teacher_feedback\ajax;

defined('MOODLE_INTERNAL') || die();

// Подключение дополнительных библиотек
require_once($CFG->libdir . "/externallib.php");
require_once($CFG->dirroot . '/blocks/quiz_teacher_feedback/locallib.php');
require_once($CFG->dirroot . '/mod/quiz/locallib.php');
require_once($CFG->libdir.'/blocklib.php');

use external_api;
use external_function_parameters;
use external_value;
use question_engine;
use stdClass;

class request extends external_api
{
    
    /**
     * Returns description of method parameters
     * @return external_function_parameters
     */
    public static function switch_request_status_parameters()
    {
        // ID набора вопросов
        $qubaid = new external_value(
                PARAM_INT,
                'qubaid',
                VALUE_REQUIRED
                );
        // Номер слота в наборе
        $slot = new external_value(
                PARAM_INT,
                'slot',
                VALUE_REQUIRED,
                false
                );
        // Токен доступа
        $token = new external_value(
                PARAM_RAW_TRIMMED,
                'Token, generated by rule: md5(sesskey().$qaid.$qubaid.$slot)',
                VALUE_REQUIRED,
                false
                );
        // ID - блока
        $instance = new external_value(
                PARAM_INT,
                'Block instance id',
                VALUE_REQUIRED,
                false
                );
        // статус
        $status = new external_value(
                PARAM_BOOL,
                'Status',
                VALUE_REQUIRED,
                false
                );
        
        $params = [
            'qubaid' => $qubaid,
            'slot' => $slot,
            'token' => $token,
            'instance' => $instance,
            'status' => $status
        ];
        
        return new external_function_parameters($params);
    }
    
    /**
     * @return \external_value
     */
    public static function switch_request_status_returns()
    {
        return new external_value(PARAM_BOOL, 'Save result');
    }
    
    /**
     * Получение информации о текущем этапе прохождения тестирования
     * 
     * @param int $qubaid - ID набора вопросов
     * @param int $slot - Номер слота в наборе
     * @param string $token - Токен доступа
     * @param int $instance - ID - блока
     * @param bool $satus - статус
     * @return bool
     */
    public static function switch_request_status($qubaid, $slot, $token, $instance, $status) : bool
    {
        // получение конфига блока
        $block = block_quiz_teacher_feedback_get_block($instance);
        // получение набора вопросов
        $quba = question_engine::load_questions_usage_by_activity($qubaid);
        if ( ! empty($quba) && ! empty($block) )
        {
            // получение попытки прохождения вопроса пользователем
            $qa = $quba->get_question_attempt($slot);
            if ( !empty($qa) )
            {
                // получение ID попытки прохождения вопроса
                $qaid = (int)$qa->get_database_id();
                // валидация подписи
                $currenttoken = md5(sesskey().$qaid.$qubaid.$slot);
                if ( $token == $currenttoken )
                {
                    // Получение комментария по вопросу
                    $record = new stdClass();
                    $record->needsgrading = $status;
                    $record->qaid = $qa->get_database_id();
                    return (bool)block_quiz_teacher_feedback_save_feedback($record);
                }
            }
        }
        return false;
    }
}