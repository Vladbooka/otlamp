{"version":3,"sources":["../src/dof_str.js"],"names":["define","$","dajax","promiseCache","get_string","key","ptype","pcode","param","request","get_strings","then","results","requests","deferred","Deferred","ajaxrequests","fetchpromises","doneFunc","str","resolve","failFunc","reason","reject","i","length","cacheKey","push","fetchpromise","methodname","args","stringid","done","bind","fail","promise","call","when","apply","arguments","ex"],"mappings":"AAsBAA,OAAM,qBAAC,CAAC,QAAD,CAAW,oBAAX,CAAD,CAAmC,SAASC,CAAT,CAAYC,CAAZ,CAAmB,CAExD,GAAIC,CAAAA,CAAY,CAAG,EAAnB,CAEA,MAA0C,CAEtCC,UAAU,CAAE,oBAASC,CAAT,CAAcC,CAAd,CAAqBC,CAArB,CAA4BC,CAA5B,CAAmC,CAC3C,GAAIC,CAAAA,CAAO,CAAG,KAAKC,WAAL,CAAiB,CAAC,CAC5BL,GAAG,CAAEA,CADuB,CAE5BC,KAAK,CAAEA,CAFqB,CAG5BC,KAAK,CAAEA,CAHqB,CAI5BC,KAAK,CAAEA,CAJqB,CAAD,CAAjB,CAAd,CAOA,MAAOC,CAAAA,CAAO,CAACE,IAAR,CAAa,SAASC,CAAT,CAAkB,CAClC,MAAOA,CAAAA,CAAO,CAAC,CAAD,CACjB,CAFM,CAGV,CAbqC,CActCF,WAAW,CAAE,qBAASG,CAAT,CAAmB,CAkB5B,OAhBIC,CAAAA,CAAQ,CAAGb,CAAC,CAACc,QAAF,EAgBf,CAfIH,CAAO,CAAG,EAed,CAbII,CAAY,CAAG,EAanB,CAZIC,CAAa,CAAG,EAYpB,CARIC,CAAQ,CAAG,SAASC,CAAT,CAAc,CACzB,KAAKC,OAAL,CAAaD,CAAb,CACH,CAMD,CAJIE,CAAQ,CAAG,SAASC,CAAT,CAAiB,CAC5B,KAAKC,MAAL,CAAYD,CAAZ,CACH,CAED,CAASE,CAAC,CAAG,CAAb,CACQf,CADR,CAAgBe,CAAC,CAAGX,CAAQ,CAACY,MAA7B,CAAqCD,CAAC,EAAtC,CAA0C,CAClCf,CADkC,CACxBI,CAAQ,CAACW,CAAD,CADgB,CAEtCf,CAAO,CAACiB,QAAR,CAAmB,WAAajB,CAAO,CAACJ,GAArB,CAA2B,GAA3B,CAAiCI,CAAO,CAACH,KAAzC,CAAiD,GAAjD,CAAuDG,CAAO,CAACF,KAA/D,CAAuE,KAA1F,CAEA,GAA8C,WAA1C,QAAOJ,CAAAA,CAAY,CAACM,CAAO,CAACiB,QAAT,CAAvB,CAA2D,CACvDT,CAAa,CAACU,IAAd,CAAmBxB,CAAY,CAACM,CAAO,CAACiB,QAAT,CAA/B,CACH,CAFD,IAEO,CAEH,GAAIE,CAAAA,CAAY,CAAG3B,CAAC,CAACc,QAAF,EAAnB,CAEAC,CAAY,CAACW,IAAb,CAAkB,CACdE,UAAU,CAAE,gBADE,CAEdC,IAAI,CAAE,CACFC,QAAQ,CAAEtB,CAAO,CAACJ,GADhB,CAEFC,KAAK,CAAEG,CAAO,CAACH,KAFb,CAGFC,KAAK,CAAEE,CAAO,CAACF,KAHb,CAIFC,KAAK,CAAEC,CAAO,CAACD,KAJb,CAFQ,CAQdwB,IAAI,CAAEd,CAAQ,CAACe,IAAT,CAAcL,CAAd,CARQ,CASdM,IAAI,CAAEb,CAAQ,CAACY,IAAT,CAAcL,CAAd,CATQ,CAAlB,EAYAzB,CAAY,CAACM,CAAO,CAACiB,QAAT,CAAZ,CAAiCE,CAAY,CAACO,OAAb,EAAjC,CACAlB,CAAa,CAACU,IAAd,CAAmBxB,CAAY,CAACM,CAAO,CAACiB,QAAT,CAA/B,CACH,CACJ,CAGD,GAA0B,CAAtB,CAAAV,CAAY,CAACS,MAAjB,CAA6B,CACzBvB,CAAK,CAACkC,IAAN,CAAWpB,CAAX,OACH,CAEDf,CAAC,CAACoC,IAAF,CAAOC,KAAP,CAAa,IAAb,CAAmBrB,CAAnB,EAAkCe,IAAlC,CACI,UAAW,CAEP,IAAK,GAAIR,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGe,SAAS,CAACd,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C,CACvCZ,CAAO,CAACY,CAAD,CAAP,CAAae,SAAS,CAACf,CAAD,CACzB,CACDV,CAAQ,CAACM,OAAT,CAAiBR,CAAjB,CACH,CAPL,EAQEsB,IARF,CASI,SAASM,CAAT,CAAa,CACT1B,CAAQ,CAACS,MAAT,CAAgBiB,CAAhB,CACH,CAXL,EAcA,MAAO1B,CAAAA,CAAQ,CAACqB,OAAT,EACV,CA/EqC,CAiF7C,CArFK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Jquery модуль для работы с вебсервисами электронного деканата\n *\n * @module     dof_str\n * @package    block_dof\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'block_dof/dof_ajax'], function($, dajax) {\n\n    var promiseCache = [];\n\n    return /** @alias module:block/dof_str */ {\n\n        get_string: function(key, ptype, pcode, param) {\n            var request = this.get_strings([{\n                key: key,\n                ptype: ptype,\n                pcode: pcode,\n                param: param\n            }]);\n\n            return request.then(function(results) {\n                return results[0];\n            });\n        },\n        get_strings: function(requests) {\n\n            var deferred = $.Deferred();\n            var results = [];\n\n            var ajaxrequests = [];\n            var fetchpromises = [];\n\n            // Done handler for ajax call. Must be bound to the current fetchpromise. We do this\n            // to avoid creating a function in a loop.\n            var doneFunc = function(str) {\n                this.resolve(str);\n            };\n\n            var failFunc = function(reason) {\n                this.reject(reason);\n            };\n\n            for (var i = 0; i < requests.length; i++) {\n                var request = requests[i];\n                request.cacheKey = 'dof_str/' + request.key + '/' + request.ptype + '/' + request.pcode + '/ru';\n                // If we ever fetched this string with a promise, reuse it.\n                if (typeof promiseCache[request.cacheKey] !== 'undefined') {\n                    fetchpromises.push(promiseCache[request.cacheKey]);\n                } else {\n                    // Add this to the list we need to really fetch.\n                    var fetchpromise = $.Deferred();\n\n                    ajaxrequests.push({\n                        methodname: 'dof_get_string',\n                        args: {\n                            stringid: request.key,\n                            ptype: request.ptype,\n                            pcode: request.pcode,\n                            param: request.param\n                        },\n                        done: doneFunc.bind(fetchpromise),\n                        fail: failFunc.bind(fetchpromise)\n                    });\n\n                    promiseCache[request.cacheKey] = fetchpromise.promise();\n                    fetchpromises.push(promiseCache[request.cacheKey]);\n                }\n            }\n\n            // Everything might already be queued so we need to check if we have real ajax requests to run.\n            if (ajaxrequests.length > 0) {\n                dajax.call(ajaxrequests, true, false);\n            }\n\n            $.when.apply(null, fetchpromises).done(\n                function() {\n                    // Turn the list of arguments (unknown length) into a real array.\n                    for (var i = 0; i < arguments.length; i++) {\n                        results[i] = arguments[i];\n                    }\n                    deferred.resolve(results);\n                }\n            ).fail(\n                function(ex) {\n                    deferred.reject(ex);\n                }\n            );\n\n            return deferred.promise();\n        }\n    };\n});\n"],"file":"dof_str.min.js"}